name: Build DeepSeek-OCR on RunPod

on:
  push:
    branches: [ main ]
    paths:
      - 'deepseek_ocr_server.py'
      - 'Dockerfile.deepseek*'
      - '.github/workflows/build-on-runpod.yml'
  workflow_dispatch:

env:
  RUNPOD_GPU_TYPE: "NVIDIA RTX 4000 Ada Generation"
  CONTAINER_DISK_SIZE: 30
  RUNPOD_TEMPLATE: "runpod/pytorch:2.1.0-py3.10-cuda11.8.0-devel-ubuntu22.04"

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install RunPod CLI
      run: |
        pip install runpod
    
    - name: Create RunPod Pod and Build
      env:
        RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        python3 << 'EOF'
        import runpod
        import time
        import os
        import sys
        
        # Initialize RunPod
        runpod.api_key = os.environ['RUNPOD_API_KEY']
        
        print("🚀 Creating RunPod GPU pod...")
        
        try:
            # Create a pod
            pod = runpod.create_pod(
                name="github-build-" + os.environ['GITHUB_SHA'][:8],
                image_name=os.environ['RUNPOD_TEMPLATE'],
                gpu_type_id=os.environ['RUNPOD_GPU_TYPE'],
                cloud_type="SPOT",  # Use spot for cheaper pricing
                container_disk_in_gb=int(os.environ['CONTAINER_DISK_SIZE']),
                ports="22/tcp",
            )
            
            pod_id = pod['id']
            print(f"✅ Pod created: {pod_id}")
            
            # Wait for pod to be running
            print("⏳ Waiting for pod to be ready...")
            max_wait = 300  # 5 minutes
            start_time = time.time()
            
            while time.time() - start_time < max_wait:
                pod_status = runpod.get_pod(pod_id)
                if pod_status['desiredStatus'] == 'RUNNING':
                    print("✅ Pod is running!")
                    break
                print(f"   Status: {pod_status['desiredStatus']}...")
                time.sleep(10)
            else:
                print("❌ Pod failed to start within 5 minutes")
                runpod.stop_pod(pod_id)
                sys.exit(1)
            
            # Get pod connection info
            pod_info = runpod.get_pod(pod_id)
            ssh_command = f"ssh -p {pod_info['machine']['ports']['22/tcp']} root@{pod_info['machine']['podHostId']}"
            
            print(f"📡 SSH: {ssh_command}")
            
            # Build commands to run on pod
            build_script = f"""
            set -e
            
            echo "📥 Installing dependencies..."
            apt-get update && apt-get install -y git curl
            
            echo "📦 Cloning repository..."
            cd /workspace
            git clone https://github.com/{os.environ['GITHUB_REPOSITORY']}.git build
            cd build
            git checkout {os.environ['GITHUB_SHA']}
            
            echo "🔨 Building Docker image..."
            docker build -f Dockerfile.deepseek.prebuilt -t temp-build:latest .
            
            echo "🏷️  Tagging image..."
            docker tag temp-build:latest ghcr.io/{os.environ['GITHUB_REPOSITORY']}/deepseek-ocr:latest
            docker tag temp-build:latest ghcr.io/{os.environ['GITHUB_REPOSITORY']}/deepseek-ocr:{os.environ['GITHUB_SHA'][:8]}
            
            echo "🔐 Logging in to GitHub Container Registry..."
            echo {os.environ['GITHUB_TOKEN']} | docker login ghcr.io -u {os.environ['GITHUB_ACTOR']} --password-stdin
            
            echo "📤 Pushing to registry..."
            docker push ghcr.io/{os.environ['GITHUB_REPOSITORY']}/deepseek-ocr:latest
            docker push ghcr.io/{os.environ['GITHUB_REPOSITORY']}/deepseek-ocr:{os.environ['GITHUB_SHA'][:8]}
            
            echo "✅ Build complete!"
            """
            
            # Execute build on pod
            print("🔨 Starting build on RunPod...")
            # Note: RunPod API doesn't directly support command execution
            # You would need to use SSH or RunPod's GraphQL API for this
            print("⚠️  Manual SSH execution required - see pod info above")
            
            # In production, you'd use paramiko or fabric to SSH and run commands
            # For now, we'll just create the pod and provide instructions
            
            print("\n" + "="*70)
            print("🎯 MANUAL STEP REQUIRED:")
            print("="*70)
            print(f"SSH into pod: {ssh_command}")
            print("Then run these commands:")
            print(build_script)
            print("="*70)
            
            # Keep pod running for 30 minutes for manual build
            print("\n⏰ Pod will auto-stop in 30 minutes")
            print(f"💰 Cost: ~$0.13 (30min × $0.26/hr)")
            
        except Exception as e:
            print(f"❌ Error: {e}")
            if 'pod_id' in locals():
                print(f"🧹 Cleaning up pod {pod_id}...")
                runpod.stop_pod(pod_id)
            sys.exit(1)
        
        EOF

    - name: Summary
      if: always()
      run: |
        echo "✅ RunPod pod created for building"
        echo "💡 SSH into the pod to complete the build"
        echo "🔗 Visit: https://www.runpod.io/console/pods"

